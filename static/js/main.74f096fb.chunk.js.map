{"version":3,"sources":["utils/dispatcher.ts","endpoints.ts","components/Lessons/index.tsx","components/ClassRooms/index.tsx","components/Schedule/Timeline/index.tsx","components/Schedule/Header/index.tsx","scenes/Schedule/index.tsx","scenes/Default/index.tsx","routes.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["initRequest","url","params","initURL","URL","Object","keys","forEach","key","searchParams","append","href","endpoints","Endpoints","ClassRooms","_a","all","_super","LessonCard","tslib_es6","prototype","render","lesson","this","props","react","className","group","name","beginning","end","description","components_ClassRooms","ClassRoomItem","classRooms","lessons","map","index","components_Lessons","index_module","Schedule_Timeline","ScheduleHeader","scenes_Schedule","ScheduleScene","_this","apply","arguments","loadClassRooms","fetch","date","method","then","res","json","result","componentDidMount","Schedule_Header","room","mobx_module","DefaultScene","routes","BrowserRouter","Switch","Route","path","component","exact","Default","src_App","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","react_dom","document","getElementById","toString","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.74f096fb.chunk.js","sourcesContent":["export const initRequest = (url: string, params?: Object): string => {\r\n    const initURL = new URL(url)\r\n\r\n    if(params) {\r\n        Object.keys(params).forEach(key => initURL.searchParams.append(key, params[key]))\r\n    }\r\n\r\n    return `${initURL.href}`\r\n}","const baseURL = 'http://ejj.herokuapp.com'\r\n\r\nconst origin = (path: string) => `${baseURL}${path}`\r\n\r\nexport default class Endpoints {\r\n    static ClassRooms = class {\r\n        static all = origin('/schedule')\r\n    }\r\n}","import * as React from 'react'\r\nimport Lesson from \"../../models/lesson\";\r\n\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n    lesson: Lesson.Model\r\n}\r\n\r\nexport default class LessonCard extends React.Component<Props, {}> {\r\n    render() {\r\n        const {lesson} = this.props\r\n\r\n        return(\r\n            <div className='lesson_item'>\r\n                <div className='lesson_info'>\r\n                    <div className='group_name'>\r\n                        {lesson.group.name}\r\n                    </div>\r\n                    <div className='lesson_duration'>\r\n                        {lesson.beginning} - {lesson.end}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className='lesson_name'>\r\n                    {lesson.name}\r\n                </div>\r\n                <div className='lesson_description'>\r\n                    {lesson.description}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nimport ClassRoom from \"../../models/classroom\";\r\n\r\nimport './index.scss'\r\nimport { observer } from 'mobx-react';\r\nimport Lesson from \"../../models/lesson\";\r\nimport LessonCard from \"../Lessons\";\r\n\r\ninterface Props {\r\n    classRooms: ClassRoom.Model\r\n}\r\n\r\n@observer\r\nclass ClassRoomItem extends React.Component<Props, {}> {\r\n    render() {\r\n        const {classRooms} = this.props\r\n\r\n        return (\r\n            <div className='class_room_column'>\r\n                <div className='name'>\r\n                    {classRooms.name}\r\n                </div>\r\n                <div className='lesson_card'>\r\n                    {classRooms.lessons.map((lesson: Lesson.Model, index: number) =>\r\n                        <LessonCard\r\n                            key={index}\r\n                            lesson={lesson}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassRoomItem","import * as React from \"react\";\r\n\r\nimport './index.scss'\r\n\r\nconst ScheduleTimeline = () => {\r\n    return (\r\n        <div className='schedule'>\r\n            <div className=\"timeline\">\r\n                <ul>\r\n                    <li><span>08:00</span></li>\r\n                    <li><span>09:30</span></li>\r\n                    <li><span>11:00</span></li>\r\n                    <li><span>12:30</span></li>\r\n                    <li><span>13:00</span></li>\r\n                    <li><span>14:30</span></li>\r\n                    <li><span>16:00</span></li>\r\n                    <li><span>17:30</span></li>\r\n                    <li><span>18:00</span></li>\r\n                    <li><span>19:30</span></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScheduleTimeline","import * as React from 'react'\r\n\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nexport default class ScheduleHeader extends React.Component<Props, {}> {\r\n    render() {\r\n        return(\r\n            <div className='calendar_header'>\r\n                Электронный Журнал\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { History } from 'history';\r\nimport {initRequest} from \"../../utils/dispatcher\";\r\nimport Endpoints from \"../../endpoints\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from 'mobx-react';\r\nimport ClassRoom from '../../models/classroom';\r\nimport ClassRoomItem from '../../components/ClassRooms';\r\n\r\nimport './index.scss'\r\nimport ScheduleTimeline from \"../../components/Schedule/Timeline\";\r\nimport ScheduleHeader from \"../../components/Schedule/Header\";\r\n\r\ninterface Props {\r\n    history: History\r\n}\r\n\r\n@observer\r\nexport default class ScheduleScene extends React.Component<Props, {}> {\r\n\r\n    @observable\r\n    private classRooms: ClassRoom.Model[] = []\r\n\r\n    componentDidMount() {\r\n        this.loadClassRooms()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ScheduleHeader/>\r\n                <ScheduleTimeline/>\r\n                <div className='class_room'>\r\n                    {this.classRooms.map((room: ClassRoom.Model, index: number) =>\r\n                        <ClassRoomItem\r\n                        key={index}\r\n                        classRooms={room}\r\n                        />)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private loadClassRooms = () => {\r\n        fetch(initRequest(Endpoints.ClassRooms.all, {date: '2018-12-01'}), {method: 'get'})\r\n            .then(res => {\r\n                res.json()\r\n                    .then((result: ClassRoom.Wrapper) => {\r\n                        this.classRooms = result.classRooms\r\n                    })\r\n            })\r\n    }\r\n\r\n}","import * as React from \"react\";\r\n\r\nexport default class DefaultScene extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 There is no such page\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react'\r\nimport {Route, Switch} from 'react-router'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport ScheduleScene from \"./scenes/Schedule\"\r\nimport DefaultScene from \"./scenes/Default\";\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path={'/'} component={ScheduleScene} exact />\r\n                <Route path={'/schedule'} component={ScheduleScene}/>\r\n                <Route path={'*'} component={DefaultScene}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter","import * as React from 'react'\r\nimport AppRouter from \"./routes\";\r\n\r\nclass App extends React.Component {\r\n   render() {\r\n    return (\r\n        <AppRouter/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}